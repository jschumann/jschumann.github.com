---
layout: page
title: "Notes on The RSpec Book"
comments: true
sharing: true
footer: true
---
%h2 Part I — Getting Started with RSpec and Cucumber

%h3 1. Introduction
%h4 1.1 Test-Driven Development: Where It All Started 
%h4 1.2 Behaviour-Driven Development: The Next Step 
%h4 1.3 RSpec 
%h4 1.4 Cucumber 
%h4 1.5 The BDD Cycle 

%h3 2. Hello
%h4 2.1 Installation 
%h4 2.2 Hello RSpec 
%h4 2.3 Hello Cucumber 

%h3 3. Describing Features
%h4 3.1 Introducing Codebreaker
%h4 3.2 Planning the First Release 
%h4 3.3 Planning the First Iteration 
%h4 3.4 What We’ve Learned 

%h3 4. Automating Features with Cucumber
%h4 4.1 Steps and Step Definitions
%h4 4.2 Step Definition Methods
%h4 4.3 Test Double
%h4 4.4 What We’ve Learned

%h3 5. Describing Code with RSpec
%h4 5.1 Getting Started with RSpec
%h4 5.2 Red: Start with a Failing Code Example 
%h4 5.3 Green: Get the Example to Pass 
%h4 5.4 Refactor 
%h4 5.5 What We’ve Learned 

%h3 6. Adding New Features
%h4 6.1 Scenario Outlines in Cucumber 
%h4 6.2 Responding to Change 
%h4 6.3 What We’ve Learned 

%h3 7. Specifying an Algorithm
%h4 7.1 Begin with the Simplest Example
%h4 7.2 Refactor to Remove Duplication 
%h4 7.3 Refactor to Express Intent 
%h4 7.4 What We’ve Learned 

%h3 8. Refactoring with Confidence
%h4 8.1 Sniffing Out Code Smells
%h4 8.2 One Step at a Time
%h4 8.3 Updating Specs After Refactoring
%h4 8.4 Exploratory Testing 
%h4 8.5 What We’ve Learned 

%h3 9. Feeding Back What We’ve Learned
%h4 9.1 Use Cucumber for Collaboration 
%h4 9.2 Experimenting with a New Implementation 
%h4 9.3 What We’ve Learned 

%h2 Part II — Behaviour-Driven Development

%h3 10. The Case for BDD
%h4 10.1 How Traditional Projects Fail
%h4 10.2 Why Traditional Projects Fail
%h4 10.3 Redefining the Problem
%h4 10.4 The Cost of Going Agile
%h4 10.5 What We’ve Learned

%h3 11. Writing Software That Matters
%h4 11.1 A Description of BDD
%h4 11.2 The Principles of BDD
%h4 11.3 The Project Inception
%h4 11.4 The Cycle of Delivery
%h4 11.5 What’s in a Story?
%h4 11.6 What We’ve Learned

%h3 12. Code Examples
%h4 12.1 Describe It!
%h4 12.2 Pending Examples 
%h4 12.3 Hooks: Before, After, and Around 
%h4 12.4 Helper Methods 
%h4 12.5 Shared Examples 
%h4 12.6 Nested Example Groups 
%h4 12.7 What We’ve Learned 

%h3 13. RSpec::Expectations
%h4 13.1 should, should_not, and matchers
%h4 13.2 Built-in Matchers
%h4 13.3 Predicate Matchers
%h4 13.4 Be True in the Eyes of Ruby
%h4 13.5 Have Whatever You Like 
%h4 13.6 Operator Expressions 
%h4 13.7 Generated Descriptions 
%h4 13.8 Subjectivity 
%h4 13.9 What We’ve Learned 

%h3 14. RSpec::Mocks
%h4 14.1 Test Doubles 
%h4 14.2 Method Stubs 
%h4 14.3 Message Expectations 
%h4 14.4 Test-Specific Extensions 
%h4 14.5 More on Method Stubs 
%h4 14.6 More on Message Expectations 
%h4 14.7 When to Use Test Doubles and Test-Specific Extensions 
%h4 14.8 Risks and Trade-Offs 
%h4 14.9 Choosing Other Test Double Frameworks
%h4 14.10 What We’ve Learned

%h2 Part III — RSpec

%h3 15. Tools and Integration
%h4 15.1 The rspec Command
%h4 15.2 TextMate
%h4 15.3 Autotest
%h4 15.4 Rake
%h4 15.5 RCov
%h4 15.6 What We’ve Learned 

%h3 16. Extending RSpec
%h4 16.1 Metadata
%h4 16.2 Configuration
%h4 16.3 Filtering
%h4 16.4 Extension Modules
%h4 16.5 Global Hooks
%h4 16.6 Mock Framework
%h4 16.7 Custom Matchers
%h4 16.8 Macros
%h4 16.9 Custom Formatters 
%h4 16.10 What We’ve Learned 

%h3 17. Intro to Cucumber
%h4 17.1 From 20,000 Feet
%h4 17.2 Features
%h4 17.3 Customer Acceptance Tests
%h4 17.4 Gherkin
%h4 17.5 Scenarios
%h4 17.6 Steps 
%h4 17.7 The cucumber Command 
%h4 17.8 Given/When/Then 
%h4 17.9 Declarative and Imperative Scenario Styles 
%h4 17.10 Organizing Features 
%h4 17.11 Tags 
%h4 17.12 What We’ve Learned 

%h2 Part IV — Cucumber

%h3 18. Cucumber Detail
%h4 18.1 Step Definitions
%h4 18.2 World
%h4 18.3 Calling Steps Within Step Definitions
%h4 18.4 Hooks
%h4 18.5 Background
%h4 18.6 Multiline Text
%h4 18.7 Tables in Steps
%h4 18.8 Scenario Outlines
%h4 18.9 Configuration
%h4 18.10 What We’ve Learned

%h2 Part V — Behaviour-Driven Rails

%h3 19. BDD in Rails
%h4 19.1 Outside-In Rails Development 
%h4 19.2 Setting Up a Rails 3 Project 
%h4 19.3 Setting Up a Rails 2 Project 
%h4 19.4 What We’ve Learned 

%h3 20. Cucumber with Rails
%h4 20.1 Step Definition Styles
%h4 20.2 Direct Model Access 
%h4 20.3 What We’ve Learned 

%h3 21. Simulating the Browser with Webrat
%h4 21.1 Writing Simulated Browser Step Definitions
%h4 21.2 Navigating to Pages
%h4 21.3 Manipulating Forms
%h4 21.4 Specifying Outcomes with View Matchers 
%h4 21.5 Building on the Basics 
%h4 21.6 What We’ve Learned 

%h3 22. Automating the Browser with Webrat and Selenium
%h4 22.1 Getting Started
%h4 22.2 Writing Step Definitions for Selenium
%h4 22.3 Debugging Selenium Issues
%h4 22.4 What We’ve Learned

%h3 23. Rails Views
%h4 23.1 Writing View Specs 
%h4 23.2 Mocking Models 
%h4 23.4 Specifying Helpers 
%h4 23.5 When Should I Write View Specs? 
%h4 23.6 What We’ve Learned 

%h3 24. Rails Controllers
%h4 24.1 Controller Specs 
%h4 24.2 Context-Specific Examples 
%h4 24.3 Specifying ApplicationController 
%h4 24.4 What We’ve Learned 

%h3 25. Rails Models 
%h4 25.1 Writing Model Specs 
%h4 25.2 Specifying Business Rules 
%h4 25.3 Exercise 
%h4 25.4 Useful Tidbits 
%h4 25.5 What We’ve Learned 

%h2 Appendices

%h3 A1. RubySpec
%h4 A1.1 The Project
%h4 A1.2 Syntax
%h4 A1.3 Guards
%h4 A1.4 Extensibility
%h4 A1.5 MSpec
%h4 A1.6 Tags
%h4 A1.7 Community

%h3 A2. RSpec’s Built-in Expectations

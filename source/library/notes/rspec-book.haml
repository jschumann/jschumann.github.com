---
layout: page
title: "Notes on The RSpec Book"
comments: true
sharing: true
footer: true
---
Part I — Getting Started with RSpec and Cucumber

1. Introduction
1.1 Test-Driven Development: Where It All Started 
1.2 Behaviour-Driven Development: The Next Step 
1.3 RSpec 
1.4 Cucumber 
1.5 The BDD Cycle 

2. Hello
2.1 Installation 
2.2 Hello RSpec 
2.3 Hello Cucumber 

3. Describing Features
3.1 Introducing Codebreaker
3.2 Planning the First Release 
3.3 Planning the First Iteration 
3.4 What We’ve Learned 

4. Automating Features with Cucumber
4.1 Steps and Step Definitions
4.2 Step Definition Methods
4.3 Test Double
4.4 What We’ve Learned

5. Describing Code with RSpec
5.1 Getting Started with RSpec
5.2 Red: Start with a Failing Code Example 
5.3 Green: Get the Example to Pass 
5.4 Refactor 
5.5 What We’ve Learned 

6. Adding New Features
6.1 Scenario Outlines in Cucumber 
6.2 Responding to Change 
6.3 What We’ve Learned 

7. Specifying an Algorithm
7.1 Begin with the Simplest Example
7.2 Refactor to Remove Duplication 
7.3 Refactor to Express Intent 
7.4 What We’ve Learned 

8. Refactoring with Confidence
8.1 Sniffing Out Code Smells
8.2 One Step at a Time
8.3 Updating Specs After Refactoring
8.4 Exploratory Testing 
8.5 What We’ve Learned 

9. Feeding Back What We’ve Learned
9.1 Use Cucumber for Collaboration 
9.2 Experimenting with a New Implementation 
9.3 What We’ve Learned 

Part II — Behaviour-Driven Development

10. The Case for BDD
10.1 How Traditional Projects Fail
10.2 Why Traditional Projects Fail
10.3 Redefining the Problem
10.4 The Cost of Going Agile
10.5 What We’ve Learned

11. Writing Software That Matters
11.1 A Description of BDD
11.2 The Principles of BDD
11.3 The Project Inception
11.4 The Cycle of Delivery
11.5 What’s in a Story?
11.6 What We’ve Learned

12. Code Examples
12.1 Describe It!
12.2 Pending Examples 
12.3 Hooks: Before, After, and Around 
12.4 Helper Methods 
12.5 Shared Examples 
12.6 Nested Example Groups 
12.7 What We’ve Learned 

13. RSpec::Expectations
13.1 should, should_not, and matchers
13.2 Built-in Matchers
13.3 Predicate Matchers
13.4 Be True in the Eyes of Ruby
13.5 Have Whatever You Like 
13.6 Operator Expressions 
13.7 Generated Descriptions 
13.8 Subjectivity 
13.9 What We’ve Learned 

14. RSpec::Mocks
14.1 Test Doubles 
14.2 Method Stubs 
14.3 Message Expectations 
14.4 Test-Specific Extensions 
14.5 More on Method Stubs 
14.6 More on Message Expectations 
14.7 When to Use Test Doubles and Test-Specific Extensions 
14.8 Risks and Trade-Offs 
14.9 Choosing Other Test Double Frameworks
14.10 What We’ve Learned

Part III — RSpec

15. Tools and Integration . . . . . . . . . 205
15.1 The rspec Command 210
15.2 TextMate 210
15.3 Autotest 211
15.4 Rake 212
15.5 RCov 213
15.6 What We’ve Learned 
16. Extending RSpec . . . . . . . . 215
16.1 Metadata 216
16.2 Configuration 219
16.3 Filtering 219
16.4 Extension Modules 220
16.5 Global Hooks 220
16.6 Mock Framework 224
16.7 Custom Matchers 228
16.8 Macros 230
16.9 Custom Formatters 
16.10 What We’ve Learned 
17. Intro to Cucumber . . . . 233
17.1 From 20,000 Feet 242
17.2 Features 243
17.3 Customer Acceptance Tests 244
17.4 Gherkin 245
17.5 Scenarios 247
17.6 Steps 
17.7 The cucumber Command 
17.8 Given/When/Then 
17.9 Declarative and Imperative Scenario Styles 
17.10 Organizing Features 
17.11 Tags 
17.12 What We’ve Learned 
Part IV — Cucumber
18. Cucumber Detail
18.1 Step Definitions
18.2 World
18.3 Calling Steps Within Step Definitions
18.4 Hooks
18.5 Background
18.6 Multiline Text
18.7 Tables in Steps
18.8 Scenario Outlines
18.9 Configuration
18.10 What We’ve Learned
Part V — Behaviour-Driven Rails
19. BDD in Rails . . . . . . 265
19.1 Outside-In Rails Development 
19.2 Setting Up a Rails 3 Project 
19.3 Setting Up a Rails 2 Project 
19.4 What We’ve Learned 
20. Cucumber with Rails . . . . . . 273
20.1 Step Definition Styles 279
20.2 Direct Model Access 
20.3 What We’ve Learned 
21. Simulating the Browser with Webrat . . . 281
21.1 Writing Simulated Browser Step Definitions 295
21.2 Navigating to Pages 298
21.3 Manipulating Forms 301
21.4 Specifying Outcomes with View Matchers 
21.5 Building on the Basics 
21.6 What We’ve Learned 
22. Automating the Browser with Webrat and Selenium . . . 303
22.1 Getting Started 304
22.2 Writing Step Definitions for Selenium 307
22.3 Debugging Selenium Issues 311
22.4 What We’ve Learned 313
23. Rails Views . . . . . . 315
     Writing View Specs 
     Mocking Models 
     Specifying Helpers 
     When Should I Write View Specs? 
     What We’ve Learned 
24. Rails Controllers . . . . . . 329
     Controller Specs 
     Context-Specific Examples 
     Specifying ApplicationController 
     What We’ve Learned 
25. Rails Models . . . . . . . 349
     Writing Model Specs 
     Specifying Business Rules 
     Exercise 
     Useful Tidbits 
     What We’ve Learned 
A1. RubySpec .
A1.1 The Project
A1.2 Syntax
A1.3 Guards
A1.4 Extensibility
A1.5 MSpec
A1.6 Tags
A1.7 Community
A2. RSpec’s Built-in Expectations

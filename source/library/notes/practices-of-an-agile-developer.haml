---
layout: page
title: "Notes on Practices of an Agile Developer"
comments: true
sharing: true
footer: true
---
%h2 1 Agile Software Development

%h2 2 Beginning Agility
%h3 1. Work for Outcome
%h3 2. Quick Fixes Become Quicksand
%h3 3. Criticize Ideas, Not People
%h3 4. Damn the Torpedoes, Go Ahead

%h2 3 Feeding Agility
%h3 5. Keep Up with Change
%h3 6. Invest in Your Team
%h3 7. Know When to Unlearn
%h3 8. Question Until You Understand
%h3 9. Feel the Rhythm

%h2 4 Delivering What Users Want
%h3 10. Let Customers Make Decisions
%h3 11. Let Design Guide, Not Dictate
%h3 12. Justify Technology Use
%h3 13. Keep It Releasable
%h3 14. Integrate Early, Integrate Often
%h3 15. Automate Deployment Early
%h3 16. Get Frequent Feedback Using Demos
%h3 17. Use Short Iterations, Release in Increments
%h3 18. Fixed Prices Are Broken Promises

%h2 5 Agile Feedback
%h3 19. Put Angels on Your Shoulders
%h3 20. Use It Before You Build It
%h3 21. Different Makes a Difference
%h3 22. Automate Acceptance Testing
%h3 23. Measure Real Progress
%h3 24. Listen to Users

%h2 6 Agile Coding
%h3 25. Program Intently and Expressively
%h3 26. Communicate in Code
%h3 27. Actively Evaluate Trade-Offs
%h3 28. Code in Increments
%h3 29. Keep It Simple
%h3 30. Write Cohesive Code
%h3 31. Tell, Don’t Ask
%h3 32. Substitute by Contract

%h2 7 Agile Debugging
%h3 33. Keep a Solutions Log
%h3 34. Warnings Are Really Errors
%h3 35. Attack Problems in Isolation
%h3 36. Report All Exceptions
%h3 37. Provide Useful Error Messages

%h2 8 Agile Collaboration
%h3 38. Schedule Regular Face Time
%h3 39. Architects Must Write Code
%h3 40. Practice Collective Ownership
%h3 41. Be a Mentor
%h3 42. Allow People to Figure It Out
%h3 43. Share Code Only When Ready
%h3 44. Review Code
%h3 45. Keep Others Informed

%h2 9 Epilogue: Moving to Agility
%h3 9.1 Just One New Practice
%h3 9.2 Rescuing a Failing Project
%h3 9.3 Introducing Agility: The Manager’s Guide
%h3 9.4 Introducing Agility: The Programmer’s Guide
%h3 9.5 The End?

---
layout: page
title: "Notes on Ship It!"
comments: true
sharing: true
footer: true
---
%h2 1 Introduction
%h3 1.1 Habitual Excellence
%h3 1.2 A Pragmatic Point of View
%h3 1.3 Road Map
%h3 1.4 Moving On
%h3 1.5 How Should I Read This Book?

%h2 2 Tools and Infrastructure
%h3 1. Develop in a Sandbox 
%h3 2. Manage Assets 
%h3 3. Script Your Build 
%h3 4. Build Automatically 
%h3 5. Track Issues
%h3 6. Track Features
%h3 7. Use a Testing Harness
%h3 8. On Choosing Tools
%h3 9. When Not to Experiment

%h2 3 Pragmatic Project Techniques
%h3 10. Work from The List
%h3 11. A Tech Leads
%h3 12. Coordinate and Communicate Every Day
%h3 13. Review All Code
%h3 14. Send Code Change Notifications
%h3 15. Putting It All Together

%h2 4 Tracer Bullet Development

%h2 5 Common Problems and How to Fix Them
%h3 16. Help! I’ve Inherited Legacy Code
%h3 17. Testing Untestable Code 
%h3 18. Features Keep Breaking 
%h3 19. Tests? We Stopped Using Them 
%h3 20. But It Works for Me!
%h3 21. It Hurts When I Integrate Code
%h3 22. Can’t Build the Product Reliably
%h3 23. Customers Are Unhappy
%h3 24. You’ve Got a Rogue Developer
%h3 25. Your Manager Is Unhappy
%h3 26. Team Doesn’t Work Well Together
%h3 27. Can’t Get “Buy-in” on Essential Points
%h3 28. The New Practice Didn’t Help
%h3 29. There’s No Automated Testing
%h3 30. We’re Junior Developers, With No Mentor
%h3 31. We’re on a “Death March” Project 
%h3 32. Features Keep Creeping In 
%h3 33. We’re Never Done

%h2 Appendices

%h3 A Tip Summary
%h3 B Source Code Management
%h3 C Build Scripting Tools
%h3 D Continuous Integration Systems
%h3 E Issue Tracking Software
%h3 F Development Methodologies
%h3 G Testing Frameworks
%h3 H Suggested Reading List
